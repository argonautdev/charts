{{- $name := include "argonaut-deployment.uname" . -}}
{{- $chartName := .Chart.Name -}}
{{- $releaseName := .Release.Name -}}
{{- $releaseService := .Release.Service -}}
{{- $releaseNamespace := .Release.Namespace -}}
{{- $env := .Values.argonaut.env -}}
{{- $version := .Values.version | default .Release.Revision -}}

---
# Configure Service Ingress
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ $name }}-http-services"
data:
  {{- range .Values.services }}
  {{- if or (eq .protocol "http") (eq .protocol "tls-terminated") (eq .protocol "https") (eq .protocol "grpc") (eq .protocol "grpcs") }}
  {{ .external.hostPort }}: "{{ $releaseNamespace }}/{{ $name }}: {{- .port }}"
  {{- end }}
  {{- end }}
---
# Configure Service Ingress
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ $name }}-tcp-services"
data:
  {{- range .Values.services }}
  {{- if (eq .protocol "tcp") }}
  {{ .external.hostPort }}: "{{ $releaseNamespace }}/{{ $name }}: {{- .port }}"
  {{- end }}
  {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ $name }}-udp-services"
data:
  {{- range .Values.services }}
  {{- if (eq .protocol "udp") }}
  {{ .external.hostPort }}: "{{ $releaseNamespace }}/{{ $name }}: {{- .port }}"
  {{- end }}
  {{- end }}
---
{{- range .Values.services }}
{{ if and (ne .protocol "tcp") (ne .protocol "udp")}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ $name }}-{{- .port -}}-{{- .external.hostPort -}}-ingress"
  labels:
    helm.sh/chart: {{ $chartName | quote }}
    app.kubernetes.io/name: {{ $name | quote }}
    app.kubernetes.io/managed-by: {{ $releaseService | quote }}
    app.kubernetes.io/instance: {{ $releaseName | quote }}
    argonaut.dev/env: {{ $env | quote }}
    app.kubernetes.io/version: {{ $version | quote }}
  annotations:
    # nginx.ingress.kubernetes.io/rewrite-target: /
    kubernetes.io/ingress.class: nginx
  {{- if or (eq .protocol "tls-terminated") (eq .protocol "https") (eq .protocol "grpcs") }}
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  {{- end }}
spec:
  {{- $servicePort := .port }}
  {{- $external := .external }}
  {{- if or (eq .protocol "http") (eq .protocol "grpc") }}
  rules:
    {{- range $external.hosts }}
    - host: {{ . | quote}}
      http:
        paths:
        {{- range $external.paths }}
          - path: {{ . }}
            pathType: Prefix
            backend:
              service:
                name: {{ $name | quote }}
                port:
                  number: {{ $servicePort }}
        {{- end }}
    {{- end }}
  {{ else if or (eq .protocol "tls-terminated") (eq .protocol "grpcs") (eq .protocol "https") }}
  tls:
    - hosts:
      {{- range $external.hosts }}
        - {{ . | quote }}
      {{- end }}
      secretName: "{{ $name }}-tls-cert"
  rules:
    {{- range $external.hosts }}
    - host: {{ . | quote}}
      http:
        paths:
        {{- range $external.paths }}
          - path: {{ . }}
            pathType: Prefix
            backend:
              service:
                name: {{ $name | quote }}
                port:
                  number: {{ $servicePort }}
        {{- end }}
    {{- end }}
  {{ end }}
---    
{{- end }}
{{- end }}
