
{{- $name := include "argonaut-deployment.uname" . -}}
{{- $chartName := .Chart.Name -}}
{{- $releaseName := .Release.Name -}}
{{- $releaseService := .Release.Service -}}
{{- $env := .Values.argonaut.env -}}
{{- $version := .Values.version | default .Release.Revision -}}
{{- $ports := dict -}}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "argonaut-deployment.uname" . }}
  labels:
    helm.sh/chart: {{ $chartName | quote }}
    app.kubernetes.io/name: {{ $name | quote }}
    app.kubernetes.io/managed-by: {{ $releaseService | quote }}
    app.kubernetes.io/instance: {{ $releaseName | quote }}
    argonaut.dev/env: {{ $env | quote }}
    app.kubernetes.io/version: {{ $version | quote }}
    {{- range $key, $value := .Values.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
    version: {{ .Values.version | default .Release.Revision | quote }}
  annotations:
    {{- range $key, $value := .Values.podAnnotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  # replicas: {{ .Values.replicas }}
  strategy:
    type: {{ .Values.updateStrategy }}
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ template "argonaut-deployment.uname" . }}"
      # app.kubernetes.io/instance: {{ .Release.Name | quote }}
  template:
    metadata:
      name: "{{ template "argonaut-deployment.uname" . }}"
      labels:
        helm.sh/chart: {{ $chartName | quote }}
        app.kubernetes.io/name: {{ $name | quote }}
        app.kubernetes.io/managed-by: {{ $releaseService | quote }}
        app.kubernetes.io/instance: {{ $releaseName | quote }}
        argonaut.dev/env: {{ $env | quote }}
        app.kubernetes.io/version: {{ $version | quote }}
        {{- range $key, $value := .Values.labels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
        {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end -}}
        {{/* This forces a restart if the configmap has changed */}}
        {{- if .Values.extraConfig }}
        configchecksum: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum | trunc 63 | trimSuffix "-" }}
        {{- end }}
    spec:
{{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
{{- end }}
{{- if .Values.podSecurityContext }}
      securityContext:
{{ toYaml .Values.podSecurityContext | quote | indent 8 }}
{{- end }}
      {{- if .Values.rbac.create }}
      serviceAccountName: "{{ template "argonaut-deployment.sa" . }}"
      {{- end }}
      {{- if .Values.hostAliases }}
      hostAliases: {{ toYaml .Values.hostAliases | quote | nindent 6 }}
      {{- end }}
      volumes:
        {{- range $index, $volumeMount := .Values.persistentStorage }}
        - name: "storage-vol-{{ $index }}"
          emptyDir: {}
        {{- end }}
        {{- range .Values.secretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
            {{- if .defaultMode }}
            defaultMode: {{ .defaultMode }}
            {{- end }}
        {{- end }}
        {{- range .Values.extraConfig }}
        # extraConfig
        - name: {{ .name | lower }}
          configMap:
            name: "{{ $name }}-{{ .name | lower }}"
        {{- end }}
        {{- if .Values.keystore }}
        - name: keystore
          emptyDir: {}
        {{- range .Values.keystore }}
        - name: keystore-{{ .secretName }}
          secret: {{ toYaml . | nindent 12 }}
        {{- end }}
        {{ end }}
        {{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- if or (eq .Values.antiAffinity "hard") (eq .Values.antiAffinity "soft") .Values.nodeAffinity | quote }}
      affinity:
        {{- if eq .Values.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - "{{ template "argonaut-deployment.uname" .}}"
            topologyKey: {{ .Values.antiAffinityTopologyKey }}
        {{- else if eq .Values.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: {{ .Values.antiAffinityTopologyKey }}
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - "{{ template "argonaut-deployment.uname" . }}"
        {{- end }}
      {{- end }}
        # nodeAffinity:
        #   requiredDuringSchedulingIgnoredDuringExecution:
        #     nodeSelectorTerms:
        #     - matchExpressions:
        #       - key: argonaut.dev/environment
        #         operator: In
        #         values:
        #           - {{ $env }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- if .Values.argonaut.imageRegistry }}
      imagePullSecrets:
        - name: {{ .Values.argonaut.imageRegistry }}-imgpullsecret
      {{- end }}
      {{- if .Values.initContainer.enabled }}
      initContainers:
      - name: init-container
        {{- if .Values.envFrom }}
        envFrom:
        {{- toYaml .Values.envFrom | nindent 10 }}
        {{- end }}
        securityContext:
          # runAsUser: 0
          # privileged: true
        image: "{{ .Values.initContainer.image }}"
        imagePullPolicy: "Always"
        {{- if .Values.initContainer.command }}
        command:
        {{- toYaml .Values.initContainer.command | nindent 10 }}
        {{- end }}
        volumeMounts:
          {{- range .Values.secretMounts }}
          - name: {{ .name }}
            mountPath: {{ .path }}
            {{- if .subPath }}
            subPath: {{ .subPath }}
            {{- end }}
          {{- end }}
        {{- if .Values.initResources }}
        resources:
{{- toYaml .Values.initResources | indent 10 }}
        {{- end }}
        {{- if .Values.extraInitContainers }}
{{- toYaml .Values.extraInitContainers | indent 6 }}
        {{- end }}
      {{- end }}
      containers:
      - name: "{{ template "argonaut-deployment.uname" . }}"
        {{- if .Values.securityContext }}
        securityContext:
{{- toYaml .Values.securityContext | indent 10 }}
        {{- end }}
        image: "{{ template "argonaut-deployment.imageName" . }}"
        imagePullPolicy: "Always"
        ports:
        {{- range .Values.services }}
        {{- $p := .port | toString }}
        {{- if not ( hasKey $ports $p ) -}}
        {{- $_ := set $ports $p $p }}
        - name: "{{- if .name }} {{- .name -}} {{ else }} {{- $name | trunc 4 | trimSuffix "-" -}}-{{- .port -}}-{{- randAlphaNum 4 | lower -}} {{- end }}"
          containerPort: {{ .port }}
        {{- end }}
        {{- end }}
        {{- if .Values.command }}
        command: {{ .Values.command }}
        {{- else if .Values.entrypoint }}
        command: {{ .Values.entrypoint }}
        {{- end }}
        {{- if .Values.args }}
        args: {{ .Values.args }}
        {{- else if .Values.cmd }}
        args: {{ .Values.cmd }}
        {{- end }}
        resources:
        {{- toYaml .Values.resources | nindent 10 }}
        {{- if .Values.extraEnvs }}
        env:
        {{- range .Values.extraEnvs }}
          - name: {{ .name | quote }}
          {{- if .value }}
            value: {{ .value | quote }}
          {{- else if .valueFrom }}
            valueFrom:
            {{- toYaml .valueFrom | nindent 14 }}
          {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.envFrom }}
        envFrom:
        {{- toYaml .Values.envFrom | nindent 10 }}
        {{- end }}
        readinessProbe:
        {{- toYaml .Values.readinessProbe | nindent 10 }}
        lifecycle:
        {{- toYaml .Values.lifecycle | nindent 10 }}
        volumeMounts:
          {{- range $index, $volumeMount := .Values.persistentStorage }}
          - name: "storage-vol-{{ $index }}"
            mountPath: "{{ $volumeMount.mountPath }}"
          {{- end }}
          {{- if .Values.keystore }}
          - name: keystore
            mountPath: /usr/share/"{{ template "argonaut-deployment.uname" . }}"/config/"{{ template "argonaut-deployment.uname" . }}".keystore
            subPath: "{{ template "argonaut-deployment.uname" . }}".keystore
          {{- end -}}
          {{- range .Values.secretMounts }}
          - name: {{ .name }}
            mountPath: {{ .path }}
            {{- if .subPath }}
            subPath: {{ .subPath }}
            {{- end }}
          {{- end }}
          {{- range .Values.extraConfig }}
          - name: {{ .name | lower }}
            mountPath: {{ .path }}
            readOnly: {{ .readOnly }}
          {{- end -}}
        {{- if .Values.extraVolumeMounts }}
{{- toYaml .Values.extraVolumeMounts | indent 10 }}
        {{- end }}
          {{ if .Values.extraContainers }}
{{- toYaml .Values.extraContainers  | quote | indent 6 }}
          {{- end -}}

